################################################################################
# Substitution Variables
################################################################################
substitutions:
  device_name: esphome-pico-energy-display
  device_internal_name: esphome_pico_energy_display
  device_friendly_name: ESPHome Pico Energy Display
  device_ip_address: xxx.xxx.xxx.xxx
  device_sampling_time: 30s

################################################################################
# Globals
################################################################################
globals: ##to set default reboot behavior
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

################################################################################
# Board Configuration
################################################################################
esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}

rp2040:
  board: rpipicow
  framework:
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

################################################################################
# Enable logging
################################################################################
logger:

################################################################################
# Enable Home Assistant API
################################################################################
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  password: !secret web_server_password

################################################################################
# WiFi
################################################################################
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  power_save_mode: none

  manual_ip:
    static_ip: ${device_ip_address}
    gateway: xxx.xxx.xxx.xxx
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_friendly_name}
    password: !secret web_server_password

################################################################################
# SPI
################################################################################
spi:
  clk_pin: GPIO10
  mosi_pin: GPIO11
  miso_pin: GPIO12

external_components:
  source: github://pr#5466
  components: [ spi ]

################################################################################
# Time Sensor
################################################################################
time:
  - platform: homeassistant
    id: internal_time

################################################################################
# Text Sensors
################################################################################
text_sensor:
  #-------------------------------------------------------------------------------
  # ESP32 internal sensors
  #-------------------------------------------------------------------------------
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ${device_internal_name}_ip_address
    ssid:
      name: Connected SSID
      id: ${device_internal_name}_connected_ssid
    mac_address:
      name: Mac Wifi Address
      id: ${device_internal_name}_mac_address

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  #-------------------------------------------------------------------------------
  # Custom Text sensors
  #-------------------------------------------------------------------------------
  - platform: template
    name: Uptime Human Readable
    id: ${device_internal_name}_uptime_human
    icon: mdi:clock-start
  
  #-------------------------------------------------------------------------------
  # Forcast Weather Conditions
  #-------------------------------------------------------------------------------
  - platform: homeassistant
    id: weather_forcast_condition
    entity_id: sensor.weather_forcast_condition
    internal: True
   
  #-------------------------------------------------------------------------------
  # Loadshedding
  #-------------------------------------------------------------------------------
  # Load shedding status
  - platform: homeassistant
    id: load_shedding_status
    entity_id: calendar.loadshedding_local_events
    internal: True
  
  # Next loadshedding Time Begin
  - platform: homeassistant
    id: next_loadshedding_start
    entity_id: sensor.next_loadshedding_time
    internal: true

  # Next loadshedding Time End
  - platform: homeassistant
    id: next_loadshedding_duration
    entity_id: sensor.next_loadshedding_duration
    internal: true

################################################################################
# Binary Sensors
################################################################################
binary_sensor:
  # ESP Status
  - platform: status
    name: "Status"
    id: ${device_internal_name}

################################################################################
# Sensors
################################################################################
sensor:
  #-------------------------------------------------------------------------------
  # ESP Generic Sensors
  #-------------------------------------------------------------------------------
  
  # WiFi
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: ${device_internal_name}_wifi_signal_sensor
    update_interval: ${device_sampling_time}

  # Uptime
  - platform: uptime
    name: "Uptime Sensor"
    id: ${device_internal_name}_uptime_sensor
    update_interval: ${device_sampling_time}
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${device_internal_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${device_internal_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  ################################################################################
  # Home Assistant Custom Sensors
  ################################################################################

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Weather related
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Forcast Weather Min Temp
  - platform: homeassistant
    id: weather_forcast_min_temp
    entity_id: sensor.weather_forcast_min_temp
    internal: True

  # Forcast Weather Max Temp
  - platform: homeassistant
    id: weather_forcast_max_temp
    entity_id: sensor.weather_forecast_max_temp
    internal: True

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Weather Realtime
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  # Realtime Weather Tempperature
  - platform: homeassistant
    id: weather_realtime_temperature
    entity_id: sensor.esphome_weather_station_dallas_temperature
    internal: True

  # Realtime Weather Humidity
  - platform: homeassistant
    id: weather_realtime_humidity
    entity_id: sensor.esphome_weather_station_humidity
    internal: True

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Power related
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Solar generation (Watts)  
  - platform: homeassistant
    name: "Solar"
    id: solar_power
    entity_id: sensor.sunsynk_pv1_power
    unit_of_measurement: W
    internal: True

  # Battery Power  (Watts) [Negative Power is Charging]
  - platform: homeassistant
    name: "Battery"
    id: battery_power
    entity_id: sensor.sunsynk_battery_power
    unit_of_measurement: W
    internal: True

  # Current battery Charge (%)
  - platform: homeassistant
    name: "Battery Charge"
    id: inverter_battery_charge
    entity_id: sensor.sunsynk_battery_soc
    unit_of_measurement: "%"
    internal: True

  # Grid import Power (Watts)
  - platform: homeassistant
    name: "Grid"
    id: grid_import_power
    entity_id: sensor.sunsynk_grid_power
    unit_of_measurement: W
    internal: True

  # Grid frequency   
  - platform: homeassistant
    name: "Grid Frequency"
    id: grid_frequency
    entity_id: sensor.sunsynk_grid_frequency
    internal: True

  # Inverter Output Power (Watts)
  - platform: homeassistant
    name: "Power"
    id: inverter_power
    entity_id: sensor.sunsynk_essential_power
    unit_of_measurement: W
    internal: True
  # Grid Total Power (Watts)
  - platform: homeassistant
    name: "Grid"
    id: grid_power
    entity_id: sensor.efergy_power_usage
    unit_of_measurement: W
    internal: True

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Loadshedding
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Load shedding stage
  - platform: homeassistant
    id: national_load_shedding_stage
    entity_id: sensor.load_shedding_stage_eskom
    attribute: stage
    internal: True

################################################################################
# Switch
################################################################################
switch:
  - platform: restart
    name: "Restart"
    id: device_restart
  
  - platform: safe_mode
    name: Use Safe Mode
    id: device_safe_mode

################################################################################
# Interval
################################################################################
interval:
  - interval: 10s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;

################################################################################
# Display
################################################################################
display:
  - platform: st7789v
    model: Custom
    height: 320
    width: 240
    offset_height: 0 
    offset_width: 0
    backlight_pin: GPIO13
    cs_pin: GPIO9
    dc_pin: GPIO8
    reset_pin: GPIO15
    rotation: 270
    eightbitcolor: true
    update_interval: 1s
    auto_clear_enabled: true
    lambda: |-
      // Vertical Divider  
      it.line(135, 40, 135, 210, my_white);
      
      // # Date
      it.strftime(10, 10, id(roboto_15_bold), "%a, %d %b %Y", id(internal_time).now());

      // # Weather Icons
      if (id(weather_forcast_condition).state == "clear-night")
      {
         it.printf(140, 10, id(icon_font_17), my_yellow, "%s", "\U000F0594"); // clear-night
      }
      else if (id(weather_forcast_condition).state == "cloudy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0590"); // cloudy
      }  
      else if (id(weather_forcast_condition).state == "fog")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0591"); // fog
      } 
      else if (id(weather_forcast_condition).state == "hail")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0592"); // hail
      } 
      else if (id(weather_forcast_condition).state == "lightning")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0593"); // lightning
      } 
      else if (id(weather_forcast_condition).state == "lightning-rainy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F067E"); // lightning-rainy
      } 
      else if (id(weather_forcast_condition).state == "partlycloudy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0595"); // partlycloudy
      }
      else if (id(weather_forcast_condition).state == "pouring")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0596"); // pouring
      }
      else if (id(weather_forcast_condition).state == "rainy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0597"); // rainy
      }
      else if (id(weather_forcast_condition).state == "snowy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0598"); // snowy
      }

      else if (id(weather_forcast_condition).state == "rainy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0597"); // rainy
      }
      else if (id(weather_forcast_condition).state == "snowy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0598"); // snowy
      }
      else if (id(weather_forcast_condition).state == "snowy-rainy")
      {
         it.printf(140, 10, id(icon_font_17), my_white, "%s", "\U000F0F35"); // snowy-rainy
      }
      else if (id(weather_forcast_condition).state == "sunny")
      {
         it.printf(140, 10, id(icon_font_17), my_yellow, "%s", "\U000F0599"); // sunny
      }
      else if (id(weather_forcast_condition).state == "windy")
      {
         it.printf(140, 10, id(icon_font_17), my_yellow, "%s", "\U000F059D"); // windy
      }
      else if (id(weather_forcast_condition).state == "windy-variant")
      {
         it.printf(140, 10, id(icon_font_17), my_yellow, "%s", "\U000F059E"); // windy-variant
      }
      else if (id(weather_forcast_condition).state == "exceptional")
      {
         it.printf(140, 10, id(icon_font_17), my_yellow, "%s", "\U000F0026"); // exceptional
      }

      // #Weather Min / Max Temp
      it.printf(160, 10, id(roboto_15_bold), "%.0f-%.0f°c", id(weather_forcast_min_temp).state, id(weather_forcast_max_temp).state);

      // #Wifi Status
      it.printf(295, 10, id(icon_font_17), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA"); //Wifi Status

      // ## Body ##
      it.line(0, 40, 320, 40, my_white); // separator

      // #- Left Column -#
      // #Solar Energy 
      it.printf(10, 50, id(icon_font_17), "%s", "\U000F0A72");

      if (id(solar_power).state > 1999 && id(solar_power).state < 2400) {
        it.printf(30, 50, id(roboto_15_bold), "%.0fw", my_yellow, id(solar_power).state); 
      } 
      else if (id(solar_power).state > 2399) 
      {
        it.printf(30, 50, id(roboto_15_bold), "%.0fw", my_green, id(solar_power).state); 
      } 
      else if (id(solar_power).state < 2000)
      {
        it.printf(30, 50, id(roboto_15_bold), "%.0fw", my_white, id(solar_power).state);
      }

      // #Battery state
      it.printf(10, 72, id(icon_font_17), "%s", "\U000F1901");
      it.printf(30, 72, id(roboto_15_bold), "%.0fw (%.0f%%)", id(battery_power).state, id(inverter_battery_charge).state);

      // #Inverter Load state
      it.printf(10, 94, id(icon_font_17), "%s", "\U000F192D");

      if (id(grid_frequency).state == 0) {
        it.print(30, 94, id(roboto_15_bold), my_burgundy, "Disconnected");
      } else {
        it.printf(30, 94, id(roboto_15_bold), "%.0fw", id(grid_import_power).state);
      }

      // #Grid Import state
      it.printf(10, 116, id(icon_font_17), "%s", "\U000F1903");
      it.printf(30, 116, id(roboto_15_bold), "%.0fw", id(inverter_power).state);

      // #Grid total power state
      it.printf(10, 138, id(icon_font_17), "%s", "\U000F0D3E");

      // #Is it loadshedding?
      if (id(grid_power).state == 0 ) { 
      // && id(load_shedding_status).state.c_str() == 'on') {
        it.print(30, 138, id(roboto_15_bold), my_burgundy, "Loadshedding"); // Loadshedding
      } else {
        it.printf(30, 138, id(roboto_15_bold), "%.0fw", id(grid_power).state);
      }

      it.line(0, 160, 320, 160, my_white); // separator


      // #- Loadshedding section -#
      // #Loadshedding Stage
      it.printf(10, 165, id(icon_font_17), "%s", "\U000F19DD");
      it.printf(30, 165, id(roboto_15_bold), "Stage %.0f", id(load_shedding_status).state);

      // #- Loadshedding section -#
      // # Current loadshedding stage
      it.printf(10, 165, id(icon_font_17), "%s", "\U000F19DD");
      it.printf(30, 165, id(roboto_15_bold), "Stage %.0f", id(national_load_shedding_stage).state);

      // # Loadsheding schedule
      it.printf(10, 187, id(icon_font_17), "%s", "\U000F0955");
      if (id(next_loadshedding_start).state == "unavailable") {
        it.print(30, 187, id(roboto_15_bold), "Offline");
      } else if (id(national_load_shedding_stage).state == 0) {
        it.print(30, 187, id(roboto_15_bold), "Loadshedding Supended");
      } else {
        it.printf(30, 187, id(roboto_15_bold), "%s for %s", id(next_loadshedding_start).state, id(next_loadshedding_duration).state);    
      }

      // #- Right Column -#

      // #Time
      it.strftime(227, 50, id(nunito_sans_60_bold), my_white, TextAlign::TOP_CENTER, "%H:%M", id(internal_time).now());

      // #Outside temperature
      it.printf(143, 125, id(icon_font_22), my_white, TextAlign::TOP_LEFT,"%s", "\U000F050F");
      it.printf(163, 125, id(roboto_18_bold), my_white, TextAlign::TOP_LEFT, "%.1f°C", id(weather_realtime_temperature).state);

      // #Outside humidity
      it.printf(260, 125, id(icon_font_22), my_white, TextAlign::TOP_RIGHT,"%s", "\U000F058E");
      it.printf(310, 125, id(roboto_18_bold), my_white, TextAlign::TOP_RIGHT, "%.1f%%", id(weather_realtime_humidity).state);

      it.line(0, 210, 320, 210, my_white); // separator
      // ## Footer ##


################################################################################
# Fonts
################################################################################
font:
  - file: "gfonts://Roboto"
    id: roboto_15
    size: 13

  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: roboto_15_bold
    size: 13

  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: roboto_18_bold
    size: 18

  - file:
      type: gfonts
      family: Nunito Sans
      weight: 700
    id: nunito_sans_60_bold
    size: 60

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_17
    size: 15
    glyphs:
      # Remember to put the "\U000" infront of the glyph code
      - "\U000F05A9" # Wifi
      - "\U000F05AA" # No wifif
      - "\U000F0A72" # Solar Energy
      - "\U000F02DC" # Invertor Output Power
      - "\U000F0D3E" # Grid
      - "\U000F19DD" # Grid Offline
      - "\U000F192C" # Grid Import
      - "\U000F192D" # Invertor Importing
      - "\U000F1901" # Home Battery
      - "\U000F12A6" # Battery Charging
      - "\U000F12A3" # Battery Discharging
      - "\U000F125D" # Battery Off
      - "\U000F050F" # Temperature
      - "\U000F058E" # Humidity
      - "\U000F1803" # Light Bulb
      - "\U000F07E4" # CO2
      - "\U000F0438" # TVOC
      - "\U000F0955" # Load Shedding Clock
      - "\U000F140B" # Lightning bolt
      - "\U000F1902" # Home Battery
      - "\U000F1903" # House Power
      - "\U000F0590" # Cloudy
      - "\U000F0591" # Fog
      - "\U000F0592" # Hail
      - "\U000F0F30" # Hazy
      - "\U000F0593" # Lightning
      - "\U000F067E" # Lightning Rainy
      - "\U000F0F31" # Partly Cloudy Night
      - "\U000F0594" # Clear Night
      - "\U000F0595" # Partly Cloudy
      - "\U000F0F32" # Partly Lightning
      - "\U000F0F33" # Partly Rainy
      - "\U000F0F34" # Partly Snowy
      - "\U000F0F35" # Partly Snowy Rainy
      - "\U000F0596" # Pouring
      - "\U000F0597" # Rainy
      - "\U000F0598" # Snowy
      - "\U000F067F" # Snowy Rainy
      - "\U000F0599" # Sunny
      - "\U000F059D" # Windy
      - "\U000F059E" # Windy Variant
      - "\U000F0026" # Alert

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_22
    size: 22
    glyphs:
      - "\U000F050F" # Temperature
      - "\U000F058E" # Humidity

################################################################################
# Color
################################################################################
color:
  - id: my_burgundy
    hex: "70161E"
  - id: my_red
    hex: "FF0000"
  - id: my_yellow
    hex: "FFFF00"
  - id: my_green
    hex: "00FF00"
  - id: my_blue
    hex: "0000FF"
  - id: my_white
    hex: "FFFFFF"
  - id: my_gray
    hex: "858585"

################################################################################
# Touchscreen (XPT2046) https://www.esphome.io/components/touchscreen/xpt2046.html
################################################################################
#touchscreen:
  #platform: xpt2046
  #id: touchscreen
  #cs_pin: GPIO16
  #interrupt_pin: GPIO17
  #update_interval: 50ms
  #report_interval: 1s
  #threshold: 400
  #calibration_x_min: 3860
  #calibration_x_max: 280
  #calibration_y_min: 340
  #calibration_y_max: 3860
  #swap_x_y: false
  #on_touch:
  #  - lambda: |-
  #        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
  #            touch.x,
  #            touch.y,
  #            touch.x_raw,
  #            touch.y_raw
  #            );