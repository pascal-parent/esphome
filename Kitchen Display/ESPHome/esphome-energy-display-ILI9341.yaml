################################################################################
# Substitution Variables
################################################################################
substitutions:
  device_name: "esphome-energy-display"
  device_internal_name: "esphome_energy_display"
  device_friendly_name: ESPHome Energy Display
  device_ip_address: xxx.xxx.xxx.xxx
  device_sampling_time: 30s

################################################################################
# Globals
################################################################################
globals: ##to set default reboot behavior
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

################################################################################
# Board Configuration
################################################################################
esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  # Boot Automations
  on_boot:
    # ...
    then:
      # ToDo: Fix bug
      # Set the screen to 75% brightness
      - output.set_level:
          id: backlight_pwm
          level: "75%"

esp32:
  board: esp32dev
  framework:
    type: arduino

################################################################################
# Enable logging
################################################################################
logger:
  baud_rate: 0
  logs:
    sensor: INFO
    binary_sensor: INFO
    text_sensor: INFO

################################################################################
# Enable Home Assistant API
################################################################################
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  password: !secret web_server_password

################################################################################
# WiFi
################################################################################
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  power_save_mode: none

  manual_ip:
    static_ip: ${device_ip_address}
    gateway: !secret gateway_address
    subnet: !secret subnet_address

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_friendly_name}
    password: !secret web_server_password

################################################################################
# Web Server
################################################################################
web_server:
  port: 80
  version: 2
  include_internal: true
  auth:
    username: !secret web_server_user
    password: !secret web_server_password
  local: true

captive_portal:

################################################################################
# Status led
################################################################################
status_led:
  pin:
    number: GPIO2
    inverted: false

################################################################################
# I2C
################################################################################
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: False

################################################################################
# SPI
################################################################################
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

################################################################################
# UART - not currently used
################################################################################
#uart:
# id: internal_uart
# tx_pin: GPIO1
# rx_pin: GPIO3
# baud_rate: 256000
# parity: NONE
# stop_bits: 1

################################################################################
# Home Assistant Sensors
################################################################################
time:
  - platform: homeassistant
    id: internal_time

################################################################################
# Text Sensors
################################################################################
text_sensor:
  #-------------------------------------------------------------------------------
  # ESP32 internal sensors
  #-------------------------------------------------------------------------------
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ${device_internal_name}_ip_address
    ssid:
      name: Connected SSID
      id: ${device_internal_name}_connected_ssid
    mac_address:
      name: Mac Wifi Address
      id: ${device_internal_name}_mac_address

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  #-------------------------------------------------------------------------------
  # Custom Text sensors
  #-------------------------------------------------------------------------------
  - platform: template
    name: Uptime Human Readable
    id: ${device_internal_name}_uptime_human
    icon: mdi:clock-start

  #-------------------------------------------------------------------------------
  # Home Assistant Text sensors
  #-------------------------------------------------------------------------------

  # Next loadshedding Time Begin
  - platform: homeassistant
    id: loadshedding_start
    entity_id: sensor.next_loadshedding_start_time_raw
    internal: true

  # Next loadshedding Time End
  - platform: homeassistant
    id: loadshedding_end
    entity_id: sensor.next_loadshedding_end_time_raw
    internal: true

  # Forcast Weather Conditions
  - platform: homeassistant
    id: weather_forcast_condition
    entity_id: sensor.weather_forcast_condition
    internal: True

  # Load shedding status
  - platform: homeassistant
    id: load_shedding_status
    entity_id: calendar.loadshedding_local_events
    internal: True

################################################################################
# Binary Sensors
################################################################################
binary_sensor:
  # ESP Status
  - platform: status
    name: "Status"
    id: ${device_internal_name}_device_status

################################################################################
# Sensors
################################################################################
sensor:
  #-------------------------------------------------------------------------------
  # ESP Generic Sensors
  #-------------------------------------------------------------------------------

  # Internal Temperature
  - platform: internal_temperature
    name: Internal Temperature
    id: device_temperature
    update_interval: ${device_sampling_time}

  # WiFi
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: ${device_internal_name}_wifi_signal_sensor
    update_interval: ${device_sampling_time}

  # Uptime
  - platform: uptime
    name: "Uptime Sensor"
    id: ${device_internal_name}_uptime_sensor
    update_interval: ${device_sampling_time}
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${device_internal_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${device_internal_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  ################################################################################
  # Home Assistant Custom Sensors
  ################################################################################

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Power related
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  # Grid Total Power (Watts)
  - platform: homeassistant
    name: "Grid"
    id: grid_power
    entity_id: sensor.power_usage
    unit_of_measurement: W

  # Grid import Power (Watts)
  - platform: homeassistant
    name: "Grid"
    id: grid_import_power
    entity_id: sensor.ss_grid_power
    unit_of_measurement: W

  # Solar generation (Watts)
  - platform: homeassistant
    name: "Solar"
    id: solar_power
    entity_id: sensor.ss_pv1_power
    unit_of_measurement: W

  # Battery Power  (Watts) [Negative Power is Charging]
  - platform: homeassistant
    name: "Battery"
    id: battery_power
    entity_id: sensor.ss_battery_power
    unit_of_measurement: W

  # Inverter Output Power (Watts)
  - platform: homeassistant
    name: "Power"
    id: inverter_power
    entity_id: sensor.ss_essential_power
    unit_of_measurement: W

  # Current battery Charge (%)
  - platform: homeassistant
    name: "Battery Charge"
    id: inverter_battery_charge
    entity_id: sensor.ss_battery_soc
    unit_of_measurement: "%"

  - platform: homeassistant
    name: "Grid Frequency"
    id: grid_frequency
    entity_id: sensor.ss_grid_frequency

  # Load shedding stage
  - platform: homeassistant
    id: local_load_shedding_stage
    entity_id: sensor.loadshedding_local_status

  - platform: homeassistant
    id: national_load_shedding_stage
    entity_id: sensor.loadshedding_national_status

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Weather related
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  # Forcast Weather Min Temp
  - platform: homeassistant
    id: weather_forcast_min_temp
    entity_id: sensor.weather_forcast_min_temp
    internal: True

  # Forcast Weather Max Temp
  - platform: homeassistant
    id: weather_forcast_max_temp
    entity_id: sensor.weather_forecast_max_temp
    internal: True

  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Internal sensors
  #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  #-------------------------------------------------------------------------------
  # SHT40 Sensors (0x44)
  #-------------------------------------------------------------------------------
  - platform: sht4x
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Relative Humidity"
      id: relative_humidity
    precision: High
    update_interval: ${device_sampling_time}

  #-------------------------------------------------------------------------------
  # GY-302/BH1750 Light Sensor (0x23)
  #-------------------------------------------------------------------------------
  - platform: bh1750
    name: "Illuminance"
    id: illuminance
    address: 0x23
    update_interval: ${device_sampling_time}

  #-------------------------------------------------------------------------------
  # CCS811 Air Quality Control Sensor (0x5A)
  #-------------------------------------------------------------------------------
  - platform: ccs811
    eco2:
      name: "eCO2 Value"
      id: eco2
    tvoc:
      name: "Total Volatile Organic Compound"
      id: tvoc
    version:
      name: CCS811 Version
      id: ccs811_version
    address: 0x5A
    temperature: temperature
    humidity: relative_humidity
    update_interval: ${device_sampling_time}

################################################################################
# Switch
################################################################################
switch:
  - platform: restart
    name: "Restart"
    id: device_restart

  - platform: safe_mode
    name: Use Safe Mode
    id: device_safe_mode

################################################################################
# Interval
################################################################################
interval:
  - interval: 10s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;

################################################################################
# Display
################################################################################
display:
  - platform: ili9xxx
    id: ${device_internal_name}_display
    model: ILI9341
    cs_pin: GPIO5
    dc_pin: GPIO27
    reset_pin: GPIO33
    rotation: 270
    lambda: |-
      it.fill(Color::BLACK);

      // Vertical Divider  
      it.line(160, 40, 160, 210, my_white);

      // ## Header ##

      // # Date
      it.strftime(10, 10, id(roboto_15_bold), "%a, %d %b %Y", id(internal_time).now());

      // # Weather Icons
      if (id(weather_forcast_condition).state == "clear-night")
      {
         it.printf(145, 10, id(icon_font_17), my_yellow, "%s", "\U000F0594"); // clear-night
      }
      else if (id(weather_forcast_condition).state == "cloudy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0590"); // cloudy
      }  
      else if (id(weather_forcast_condition).state == "fog")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0591"); // fog
      } 
      else if (id(weather_forcast_condition).state == "hail")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0592"); // hail
      } 
      else if (id(weather_forcast_condition).state == "lightning")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0593"); // lightning
      } 
      else if (id(weather_forcast_condition).state == "lightning-rainy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F067E"); // lightning-rainy
      } 
      else if (id(weather_forcast_condition).state == "partlycloudy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0595"); // partlycloudy
      }
      else if (id(weather_forcast_condition).state == "pouring")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0596"); // pouring
      }
      else if (id(weather_forcast_condition).state == "rainy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0597"); // rainy
      }
      else if (id(weather_forcast_condition).state == "snowy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0598"); // snowy
      }
      else if (id(weather_forcast_condition).state == "snowy-rainy")
      {
         it.printf(145, 10, id(icon_font_17), my_white, "%s", "\U000F0F35"); // snowy-rainy
      }
      else if (id(weather_forcast_condition).state == "sunny")
      {
         it.printf(145, 10, id(icon_font_17), my_yellow, "%s", "\U000F0599"); // sunny
      }
      else if (id(weather_forcast_condition).state == "windy")
      {
         it.printf(145, 10, id(icon_font_17), my_yellow, "%s", "\U000F059D"); // windy
      }
      else if (id(weather_forcast_condition).state == "windy-variant")
      {
         it.printf(145, 10, id(icon_font_17), my_yellow, "%s", "\U000F059E"); // windy-variant
      }
      else if (id(weather_forcast_condition).state == "exceptional")
      {
         it.printf(145, 10, id(icon_font_17), my_yellow, "%s", "\U000F0026"); // exceptional
      }

      // #Weather Min / Max Temp
      it.printf(165, 10, id(roboto_15_bold), "%.0f-%.0f°C", id(weather_forcast_min_temp).state, id(weather_forcast_max_temp).state);

      // #Time
      it.strftime(250, 10, id(roboto_15_bold), "%H:%M", id(internal_time).now());

      // #Wifi Status
      it.printf(295, 10, id(icon_font_17), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA"); //Wifi Status

      // ## Body ##
      it.line(0, 40, 320, 40, my_white); // separator

      // #- Left Column -#
      // Solar Energy 
      it.printf(10, 50, id(icon_font_17), "%s", "\U000F0A72");
      it.printf(30, 50, id(roboto_15_bold), "%.0fw", id(solar_power).state);

      // #Battery state
      it.printf(10, 72, id(icon_font_17), "%s", "\U000F1901");
      it.printf(30, 72, id(roboto_15_bold), "%.0fw (%.0f%%)", id(battery_power).state, id(inverter_battery_charge).state);

      // #Inverter Load state
      it.printf(10, 94, id(icon_font_17), "%s", "\U000F192D");

      if (id(grid_frequency).state == 0) {
        it.print(30, 94, id(roboto_15_bold), my_burgundy, "Disconnected");
      } else {
        it.printf(30, 94, id(roboto_15_bold), "%.0fw", id(grid_import_power).state);
      }

      // #Grid Import state
      it.printf(10, 116, id(icon_font_17), "%s", "\U000F1903");
      it.printf(30, 116, id(roboto_15_bold), "%.0fw", id(inverter_power).state);


      // #Grid total power state
      it.printf(10, 138, id(icon_font_17), "%s", "\U000F0D3E");

      // #Is it loadshedding?
      if (id(grid_power).state == 0 ) { 
      // && id(load_shedding_status).state.c_str() == 'on') {
        it.print(30, 138, id(roboto_15_bold), my_burgundy, "Loadshedding"); // Loadshedding
      } else {
        it.printf(30, 138, id(roboto_15_bold), "%.0fw", id(grid_power).state);
      }


      it.line(0, 160, 160, 160, my_white); // separator

      // #- Loadshedding section -#

      // #Loadshedding Stage
      it.printf(10, 165, id(icon_font_17), "%s", "\U000F19DD");

      if( id(national_load_shedding_stage).state > id(local_load_shedding_stage).state ) {
        it.printf(30, 165, id(roboto_15_bold), "Stage %.0f", id(national_load_shedding_stage).state);
      } else {
        it.printf(30, 165, id(roboto_15_bold), "Stage %.0f", id(local_load_shedding_stage).state);

      }

      // #Loadsheding Schedule
      it.printf(10, 187, id(icon_font_17), "%s", "\U000F0955");

      if (id(loadshedding_start).state == "unavailable") {
        it.print(30, 187, id(roboto_15_bold), "Nothing Today");
      } else {
        it.printf(30, 187, id(roboto_15_bold), "%s - %s", id(loadshedding_start).state.c_str(), id(loadshedding_end).state.c_str());    
      }

      // #- Right Column -#

        

      it.line(0, 210, 320, 210, my_white); // separator
      // ## Footer ##
      // #Room Temperature
      it.printf(10, 217, id(icon_font_17), "%s", "\U000F050F");
      it.printf(35, 217, id(roboto_15_bold), "%.1f°C", id(temperature).state);

      // #Room Humidity
      it.printf(85, 217, id(icon_font_17), "%s", "\U000F058E");
      it.printf(105, 217, id(roboto_15_bold), "%.1f%%", id(relative_humidity).state);

      // #Room CO2
      it.printf(155, 217, id(icon_font_17), "%s", "\U000F07E4");
      it.printf(175, 217, id(roboto_15_bold), "%.0fppm", id(eco2).state);

      // #Room Tvoc
      it.printf(240, 217, id(icon_font_17), "%s", "\U000F0438");
      it.printf(260, 217, id(roboto_15_bold), "%.0fppb", id(tvoc).state);

################################################################################
# Output
################################################################################

output:
  - platform: ledc
    pin: GPIO17
    id: backlight_pwm

################################################################################
# Light
################################################################################
# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: backlight
    restore_mode: ALWAYS_ON

################################################################################
# Font
################################################################################
font:
  - file: "gfonts://Roboto"
    id: roboto_15
    size: 15

  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: roboto_15_bold
    size: 15

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_17
    size: 17
    glyphs:
      # Remember to put the "\U000" infront of the glyph code
      - "\U000F05A9" # Wifi
      - "\U000F05AA" # No wifif
      - "\U000F0A72" # Solar Energy
      - "\U000F02DC" # Invertor Output Power
      - "\U000F0D3E" # Grid
      - "\U000F19DD" # Grid Offline
      - "\U000F192C" # Grid Import
      - "\U000F192D" # Invertor Importing
      - "\U000F1901" # Home Battery
      - "\U000F12A6" # Battery Charging
      - "\U000F12A3" # Battery Discharging
      - "\U000F125D" # Battery Off
      - "\U000F050F" # Temperature
      - "\U000F058E" # Humidity
      - "\U000F1803" # Light Bulb
      - "\U000F07E4" # CO2
      - "\U000F0438" # TVOC
      - "\U000F0955" # Load Shedding Clock
      - "\U000F140B" # Lightning bolt
      - "\U000F1902" # Home Battery
      - "\U000F1903" # House Power
      - "\U000F0590" # Cloudy
      - "\U000F0591" # Fog
      - "\U000F0592" # Hail
      - "\U000F0F30" # Hazy
      - "\U000F0593" # Lightning
      - "\U000F067E" # Lightning Rainy
      - "\U000F0F31" # Partly Cloudy Night
      - "\U000F0594" # Clear Night
      - "\U000F0595" # Partly Cloudy
      - "\U000F0F32" # Partly Lightning
      - "\U000F0F33" # Partly Rainy
      - "\U000F0F34" # Partly Snowy
      - "\U000F0F35" # Partly Snowy Rainy
      - "\U000F0596" # Pouring
      - "\U000F0597" # Rainy
      - "\U000F0598" # Snowy
      - "\U000F067F" # Snowy Rainy
      - "\U000F0599" # Sunny
      - "\U000F059D" # Windy
      - "\U000F059E" # Windy Variant
      - "\U000F0026" # Alert

################################################################################
# Color
################################################################################
color:
  - id: my_burgundy
    hex: "70161E"
  - id: my_red
    hex: "FF0000"
  - id: my_yellow
    hex: "FFFF00"
  - id: my_green
    hex: "00FF00"
  - id: my_blue
    hex: "0000FF"
  - id: my_white
    hex: "FFFFFF"
  - id: my_gray
    hex: "858585"
